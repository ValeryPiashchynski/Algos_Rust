use std::collections::hash_map::Entry;
use std::collections::{BTreeMap, HashMap};

struct Solution {}

impl Solution {
    pub fn find_winners2(matches: Vec<Vec<i32>>) -> Vec<Vec<i32>> {
        let tmp: BTreeMap<i32, i32> = matches.into_iter().fold(BTreeMap::new(), |mut hm, m| {
            hm.entry(m[0]).or_insert(0); //winner
            *hm.entry(m[1]).or_insert(0) += 1; //looser
            hm
        });

        vec![
            tmp.iter()
                .filter(|(_, l)| **l == 0)
                .map(|(&i, _)| i)
                .collect(),
            tmp.iter()
                .filter(|(_, l)| **l == 1)
                .map(|(&i, _)| i)
                .collect(),
        ]
    }
    pub fn find_winners(matches: Vec<Vec<i32>>) -> Vec<Vec<i32>> {
        let mut hm_l: HashMap<i32, i32> = HashMap::new();

        let mut winners = vec![];
        let mut losers = vec![];

        for m in &matches {
            let l = m[1];

            // check for the winner in the looooosers
            match hm_l.entry(l) {
                Entry::Occupied(mut val) => {
                    *val.get_mut() += 1;
                }
                Entry::Vacant(val) => {
                    val.insert(1);
                }
            }
        }

        for m in &matches {
            let w = m[0];
            // check for the winner in the looooosers
            match hm_l.entry(w) {
                Entry::Occupied(_) => continue,
                Entry::Vacant(_) => winners.push(w),
            }
        }

        for (k, v) in hm_l.iter() {
            if *v > 1 {
                continue;
            }

            losers.push(*k);
        }

        winners.sort_unstable();
        winners.dedup();

        losers.sort_unstable();
        losers.dedup();

        vec![winners, losers]
    }
}

mod tests {
    use crate::find_players_with_zero_or_one_losses::Solution;

    #[test]
    fn test() {
        assert_eq!(
            vec![vec![1, 2, 10], vec![4, 5, 7, 8]],
            Solution::find_winners(vec![
                vec![1, 3],
                vec![2, 3],
                vec![3, 6],
                vec![5, 6],
                vec![5, 7],
                vec![4, 5],
                vec![4, 8],
                vec![4, 9],
                vec![10, 4],
                vec![10, 9]
            ])
        );

        assert_eq!(
            vec![
                vec![
                    2594, 5368, 7078, 7415, 7471, 8300, 8577, 11663, 15299, 15456, 17579, 18205,
                    22455, 22806, 24219, 30350, 33451, 33970, 36160, 36612, 36652, 38732, 41219,
                    41875, 42456, 42824, 43072, 43643, 44628, 44706, 44777, 46155, 46537, 47440,
                    48673, 50682, 50856, 52012, 53902, 58542, 61118, 61322, 62684, 63436, 64955,
                    65037, 65134, 65762, 67002, 67739, 69230, 71222, 72239, 73208, 73806, 75250,
                    76682, 76803, 77226, 78039, 78328, 78457, 80486, 82205, 82980, 83621, 84069,
                    84386, 84399, 84583, 86473, 86810, 87858, 88285, 88419, 89373, 90462, 90886,
                    91244, 92538, 93151, 93416, 94602, 96120, 98031, 99268
                ],
                vec![
                    402, 2283, 2397, 2793, 3308, 3984, 4607, 5304, 5616, 8073, 9565, 9583, 10180,
                    12230, 12847, 13150, 13195, 13232, 13819, 13843, 14252, 14375, 15817, 16859,
                    18033, 18999, 22313, 24893, 25752, 27748, 28793, 29698, 30720, 32253, 33578,
                    34918, 35794, 39557, 40074, 43420, 44873, 45907, 46145, 47799, 47942, 48278,
                    48665, 49767, 50374, 51530, 52531, 54003, 54516, 54752, 55675, 58018, 60344,
                    61973, 64913, 67288, 69877, 72539, 73183, 73238, 75421, 76002, 76543, 77318,
                    78101, 80708, 83966, 84122, 84566, 84931, 85029, 85179, 87612, 88156, 90584,
                    91196, 91966, 93441, 95082, 96864, 98585, 98621, 99402
                ]
            ],
            Solution::find_winners(vec![
                vec![38732, 34918],
                vec![88419, 84931],
                vec![84386, 14375],
                vec![83621, 84566],
                vec![43643, 15817],
                vec![86810, 30720],
                vec![58542, 76002],
                vec![33970, 3308],
                vec![84399, 48665],
                vec![5368, 25752],
                vec![22806, 29698],
                vec![7415, 3984],
                vec![24219, 83966],
                vec![7471, 402],
                vec![7078, 43420],
                vec![75250, 54752],
                vec![53902, 46145],
                vec![78039, 85029],
                vec![65134, 72539],
                vec![64955, 87612],
                vec![82980, 9583],
                vec![18205, 2793],
                vec![48673, 55675],
                vec![91244, 61973],
                vec![8300, 28793],
                vec![30350, 13819],
                vec![65762, 90584],
                vec![44777, 35794],
                vec![67739, 88156],
                vec![67002, 44873],
                vec![62684, 4607],
                vec![93151, 2283],
                vec![46537, 54516],
                vec![89373, 33578],
                vec![78457, 8073],
                vec![80486, 40074],
                vec![92538, 96864],
                vec![43072, 98585],
                vec![44628, 75421],
                vec![22455, 16859],
                vec![50856, 39557],
                vec![88285, 93441],
                vec![33451, 22313],
                vec![90886, 67288],
                vec![46155, 60344],
                vec![61118, 10180],
                vec![87858, 13232],
                vec![76803, 64913],
                vec![15456, 5616],
                vec![71222, 69877],
                vec![52012, 14252],
                vec![36160, 2397],
                vec![98031, 13150],
                vec![36652, 12847],
                vec![78328, 91966],
                vec![72239, 73183],
                vec![96120, 80708],
                vec![42456, 24893],
                vec![99268, 18033],
                vec![41219, 76543],
                vec![93416, 32253],
                vec![82205, 48278],
                vec![63436, 45907],
                vec![2594, 91196],
                vec![73806, 9565],
                vec![94602, 85179],
                vec![84583, 73238],
                vec![61322, 13843],
                vec![73208, 12230],
                vec![90462, 58018],
                vec![65037, 52531],
                vec![44706, 99402],
                vec![77226, 77318],
                vec![15299, 27748],
                vec![42824, 78101],
                vec![76682, 54003],
                vec![11663, 50374],
                vec![17579, 98621],
                vec![36612, 51530],
                vec![8577, 47799],
                vec![84069, 47942],
                vec![86473, 13195],
                vec![69230, 49767],
                vec![41875, 18999],
                vec![50682, 84122],
                vec![47440, 5304],
                vec![44628, 95082]
            ])
        )
    }
}

/*
[[2594,5368,7078,7415,7471,8300,8577,11663,15299,15456,17579,18205,22455,22806,24219,30350,33451,33970,36160,36612,36652,38732,41219,41875,42456,42824,43072,43643,44628,44628,44706,44777,46155,46537,47440,48673,50682,50856,52012,53902,58542,61118,61322,62684,63436,64955,65037,65134,65762,67002,67739,69230,71222,72239,73208,73806,75250,76682,76803,77226,78039,78328,78457,80486,82205,82980,83621,84069,84386,84399,84583,86473,86810,87858,88285,88419,89373,90462,90886,91244,92538,93151,93416,94602,96120,98031,99268],[402,2283,2397,2793,3308,3984,4607,5304,5616,8073,9565,9583,10180,12230,12847,13150,13195,13232,13819,13843,14252,14375,15817,16859,18033,18999,22313,24893,25752,27748,28793,29698,30720,32253,33578,34918,35794,39557,40074,43420,44873,45907,46145,47799,47942,48278,48665,49767,50374,51530,52531,54003,54516,54752,55675,58018,60344,61973,64913,67288,69877,72539,73183,73238,75421,76002,76543,77318,78101,80708,83966,84122,84566,84931,85029,85179,87612,88156,90584,91196,91966,93441,95082,96864,98585,98621,99402]]
 */
